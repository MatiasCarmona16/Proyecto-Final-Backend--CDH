<header>
    <div class="container">
    <nav class="navbar p-5 mt-2">
        <div class="container-navbar">
            <div class="marca-nav">
                <a href="/" class="navbar-brand">iPhone Store</a>
            </div>
            

            <div class="header-a">
            <a href="/" class="btn-dec">Home</a>
            <a href="/productsview" class="btn-dec">iStore</a>
            {{#if userInfo}}
                        <p><a href="/auth/change-rol-user" class="btn-dec">Hi {{userInfo.first_name}}!</a></p>
                        <a id="deslog" href="/api/auth/logout" class="btn-dec">Logout</a>
                        <p>|</p>
                        <a href="/cart"><svg xmlns="http://www.w3.org/2000/svg" height="16" width="12.45" viewBox="0 0 448 512"><path d="M160 112c0-35.3 28.7-64 64-64s64 28.7 64 64v48H160V112zm-48 48H48c-26.5 0-48 21.5-48 48V416c0 53 43 96 96 96H352c53 0 96-43 96-96V208c0-26.5-21.5-48-48-48H336V112C336 50.1 285.9 0 224 0S112 50.1 112 112v48zm24 48a24 24 0 1 1 0 48 24 24 0 1 1 0-48zm152 24a24 24 0 1 1 48 0 24 24 0 1 1 -48 0z"/></svg></svg></a>
                    {{else}}
                        <a href="/auth/login-view" class="btn-dec">Login</a>
                        <a href="/auth/register-view" class="btn-dec">Register</a>
                    {{/if}}
            </div>

        </div>
    </nav>
    </div>
</header>


    <main>
    <div class="container">
        <div class="container-h1-crprodprem">
            <h1>Sell your product on the iStore</h1>
        </div>
        
        <hr>

        <div class="contenedor-create-prod-prem">
        <form id="premium-create-product-form">
        
            <label for="title">Title:</label>
            <br>
            <input type="text" id="title" name="title" placeholder="Title" required>
            
            <hr>

            <label for="description">Description:</label>
            <br>
            <textarea id="description" name="description" required></textarea>

            <hr>
            
            <label for="thumbnail">Thumbnail URL:</label>
            <br>
            <input type="text" id="thumbnail" name="thumbnail">

            <hr>
            
            <label for="price">Price:</label>
            <br>
            <input type="number" id="price" name="price" step="0.01" placeholder="Price" required>

            <hr>
            
            <label for="category">Category:</label>
            <br>
            <select id="category" name="category" required>
                <option value="Celulares">Celulares</option>
            </select>

            <hr>
            
            <label for="stock">Stock:</label>
            <br>
            <input type="number" id="stock" name="stock" value="10">
            <br>
            <button type="submit">Create</button>
        </form>


        <div class="preview-container">
                <h2>Preview:</h2>
                <div class="preview-card" style="width: 18rem;">
                    <div class="img-container">
                        <img id="preview-thumbnail" src="/img/360_F_565224180_QNRiRQkf9Fw0dKRoZGwUknmmfk51SuSS.jpg" onerror="this.onerror=null;this.src='/img/360_F_565224180_QNRiRQkf9Fw0dKRoZGwUknmmfk51SuSS.jpg';" class="card-img-top" alt="...">
                    </div>
                    <div class="preview-card-body">
                        <h5 class="preview-card-title" id="preview-title"></h5>
                        <hr>
                        <p class="preview-card-subtitle">USD <span id="preview-price"></span></p>
                        <p class="preview-card-text" id="preview-description"></p>
                        <div class="d-flex justify-content-center">
                            <button class="preview-CartBtn">
                                <span class="preview-IconContainer"> 
                                    <svg xmlns="http://www.w3.org/2000/svg" height="1em" viewBox="0 0 576 512" fill="rgb(17, 17, 17)" class="cart">
                                        <path d="M0 24C0 10.7 10.7 0 24 0H69.5c22 0 41.5 12.8 50.6 32h411c26.3 0 45.5 25 38.6 50.4l-41 152.3c-8.5 31.4-37 53.3-69.5 53.3H170.7l5.4 28.5c2.2 11.3 12.1 19.5 23.6 19.5H488c13.3 0 24 10.7 24 24s-10.7 24-24 24H199.7c-34.6 0-64.3-24.6-70.7-58.5L77.4 54.5c-.7-3.8-4-6.5-7.9-6.5H24C10.7 48 0 37.3 0 24zM128 464a48 48 0 1 1 96 0 48 48 0 1 1 -96 0zm336-48a48 48 0 1 1 0 96 48 48 0 1 1 0-96z"></path>
                                    </svg>
                                </span>
                                <p class="preview-text">Add to Cart</p>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="container-img">
            <img src="/img/undraw_Add_to_cart_re_wrdo.png" alt="">
        </div>
        
        <hr>

        
        <form id="delete-product-form">
            <h2>Remove your product from the iStore</h2>
            {{#if error_msg}}
            <div style="color: red; font-size: 12px">{{error_msg}}</div>
        {{/if}}
            <label for="productId">Product ID to delete:</label>
            <input type="text" id="productId" name="productId" required>
            <button type="button" id="delete-product-btn">Delete</button>
        </form>

        
        </div>
    </div>
</main>

<script>
    //Crear product siendo premium
    document.getElementById('premium-create-product-form').addEventListener('submit', async (event) => {
        event.preventDefault();
        
        const form = event.target;
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());
        
        try {
            const response = await fetch('/api/products', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });
            
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            
            const result = await response.json();
            
            if (response.status === 201) {
                Swal.fire({
                    icon: 'success',
                    title: 'Product Created!',
                    text: 'Product has been created successfully.',
                    showConfirmButton: false,
                    timer: 1500
                }).then(() => {
                    form.reset();
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: 'Error creating product: ' + (result.message || 'Unknown error')
                });
            }
        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: 'Error creating product: ' + error.message
            });
        }
    });


    //Delete Prod siendo premium
    const deleteProduct = async (productId) => {
        try {
            const response = await fetch(`/api/products/${productId}`, {
                method: 'DELETE'
            });
            if (!response.ok) {
                throw new Error('Error al eliminar el producto');
            }
            
            Swal.fire({
                icon: 'success',
                title: 'Product successfully removed',
                showConfirmButton: false,
                timer: 2000  
            });

        } catch (error) {
            console.error('Error al eliminar el producto:', error.message);
        }
    };

    // Escucha el evento click en el botón de eliminar producto
    document.getElementById('delete-product-btn').addEventListener('click', async () => {
        const productId = document.getElementById('productId').value;
        await deleteProduct(productId);
    });

    // Evita que el formulario se envíe automáticamente al presionar enter
    document.getElementById('delete-product-form').addEventListener('submit', (event) => {
        event.preventDefault();
    });


    const updatePreview = () => {
            document.getElementById('preview-title').textContent = document.getElementById('title').value;
            document.getElementById('preview-description').textContent = document.getElementById('description').value;
            const thumbnailUrl = document.getElementById('thumbnail').value;
            document.getElementById('preview-thumbnail').src = thumbnailUrl ? thumbnailUrl : '';
            document.getElementById('preview-price').textContent = document.getElementById('price').value;
        };

        document.getElementById('title').addEventListener('input', updatePreview);
        document.getElementById('description').addEventListener('input', updatePreview);
        document.getElementById('thumbnail').addEventListener('input', updatePreview);
        document.getElementById('price').addEventListener('input', updatePreview);
        document.getElementById('category').addEventListener('change', updatePreview);
        document.getElementById('stock').addEventListener('input', updatePreview);

        updatePreview();
    ;
</script>
